using System;using System.IO;using System.Windows.Forms;using System.Text;using System.Data;namespace EarLab.ReaderWriters{	/// <summary>	/// This class can be used to read EarLab muli-channel 3 dimensional data from file.	/// </summary>	public class ReaderWriterLagFrequencyTime	{		private	const int FLOAT_BYTES = 4;		private string fileName;		private long xDimension, yDimension, zDimension;		private double xStart, xEnd, yStart, yEnd, zStart, zEnd;		private double maximumSample, minimumSample, sampleRate;		private BinaryReader outputFileReader;				/// <summary>		/// Create a new MultiChannel3DReaderWriter given a .metadata Earlab data file.		/// </summary>		/// <param name="fileName">Name and path of the target file to be opened.</param>		public ReaderWriterLagFrequencyTime(string fileName)		{			// make sure that fileName is a file that ends in .metadata, so most likely an EarLab data file, and check that the file exists along with .binary data file			if (!fileName.EndsWith(".metadata"))				throw new System.Exception("MultiChannel3DReaderWriter.MultiChannel3DReaderWriter(fileName): This constructor should only be used with a .metadata EarLab data file");			if (!File.Exists(fileName))				throw new FileNotFoundException("MultiChannel3DReaderWriter.Initialize(fileName): EarLab .metadata parameter file was not found.", fileName);			if (!File.Exists(fileName.Replace(".metadata", ".binary")))				throw new FileNotFoundException("MultiChannel3DReaderWriter.Initialize(fileName): EarLab .binary data file was not found.", fileName.Replace(".metadata", ".binary"));			this.ReadMetaDataFile(fileName);			this.Initialize(fileName.Replace(".metadata", ".binary"));		}		/// <summary>		/// This method (destructor) finalizes this class		/// </summary>		~ReaderWriterLagFrequencyTime()		{			this.Close();		}		#region Methods		/// <summary>		/// Read in EarLab .metadata parameter file and store appropriate values to local variables		/// </summary>		private void ReadMetaDataFile(string fileName)		{			DataSet xmlDataSet = ReaderWriterXMLMetadata.Read(fileName);						if (xmlDataSet != null)			{				this.minimumSample = (double)xmlDataSet.Tables["Parameters"].Rows[0]["MinValue"];				this.maximumSample = (double)xmlDataSet.Tables["Parameters"].Rows[0]["MaxValue"];				this.sampleRate = (double)xmlDataSet.Tables["Parameters"].Rows[0]["SampleRate_Hz"];				this.xStart = (double)xmlDataSet.Tables["Parameters"].Rows[0]["LagMin_uS"];				this.xEnd = (double)xmlDataSet.Tables["Parameters"].Rows[0]["LagMax_uS"];				this.xDimension = (long)xmlDataSet.Tables["Dimension"].Select("Name = 'Lag'")[0]["Value"];				this.yDimension = (long)xmlDataSet.Tables["Dimension"].Select("Name = 'Frequency'")[0]["Value"];				this.zDimension = (long)xmlDataSet.Tables["Dimension"].Select("Name = 'Time'")[0]["Value"];			}			else			{				throw new Exception("XMLMetadataReaderWriter.Read(fileName): Incorrect EarLab .metadata file format.");			}			this.yStart = this.zStart = 0;			this.yEnd = yDimension-1;			this.zEnd = zDimension-1;		}		/// <summary>		/// Initialize the MultiChannel3DReaderWriter to read a file.		/// </summary>		/// <param name="fileName">The name and path of the target file to read.</param>		private void Initialize(string fileName)		{			this.fileName = fileName;			if (this.outputFileReader != null)				this.outputFileReader.Close();			try			{				this.outputFileReader = new BinaryReader(new FileStream(this.fileName, FileMode.Open, FileAccess.Read, FileShare.Read));			}			catch			{				throw new Exception("ReaderWriterLagFrequencyTime.Initialize(fileName): Unable to open .binary file.");			}		}		/// <summary>		/// Read data from file and write to supplied array.		/// </summary>		/// <param name="zLevel">The Z (variable) level to begin read on (number of frames deep)</param>		/// <param name="dataArray">Array into which data read from file is stored.</param>		public void GetData(long zLevel, ref double[,] dataArray)		{			if (zLevel < 0 || zLevel > this.zDimension)				throw new System.Exception("MultiChannel3DReaderWriter.GetData(zLevel, dataArray): zLevel must be greater than or equal to zero, and less than zDimension.");			if (dataArray.GetLength(0) != this.xDimension || dataArray.GetLength(1) != this.yDimension)				throw new System.Exception("MultiChannel3DReaderWriter.GetData(zLevel, dataArray): dataArray dimensions are incorrect.");			long streamOffSet = (long)(this.xDimension*this.yDimension*zLevel*FLOAT_BYTES);			if (streamOffSet+this.xDimension*this.yDimension*FLOAT_BYTES > outputFileReader.BaseStream.Length)			{				for (int j=0; j<this.yDimension; j++)					for (int i=0; i<this.xDimension; i++)						dataArray[i,j] = float.MinValue;				return;			}			outputFileReader.BaseStream.Seek(streamOffSet, SeekOrigin.Begin);			for (int j=0; j<this.yDimension; j++)				for (int i=0; i<this.xDimension; i++)					dataArray[i,j] = outputFileReader.ReadSingle();		}		/// <summary>		/// Closes all open files or socket connections		/// </summary>		public void Close()		{			if (this.outputFileReader != null)			{				this.outputFileReader.Close();				this.outputFileReader = null;			}		}		#endregion		#region Properties		/// <summary>		/// Get lag (fixed) dimension size of file.		/// </summary>		public long Lag		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.X: No valid data to return in current state.");				return this.xDimension;			}		}		/// <summary>		/// Get lag (fixed) dimension start value.		/// </summary>		public double LagStart		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.XStart: No valid data to return in current state.");				return this.xStart;			}		}		/// <summary>		/// Get lag (fixed) dimension end value.		/// </summary>		public double LagEnd		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.XEnd: No valid data to return in current state.");				return this.xEnd;			}		}		/// <summary>		/// Get frequency (fixed) dimension size of file or socket data.		/// </summary>		public long Frequency		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.Y: No valid data to return in current state.");				return this.yDimension;			}		}		/// <summary>		/// Get frequency (fixed) dimension start value.		/// </summary>		public double FrequencyStart		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.YStart: No valid data to return in current state.");				return this.yStart;			}		}		/// <summary>		/// Get frequency (fixed) dimension end value.		/// </summary>		public double FrequencyEnd		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.YEnd: No valid data to return in current state.");				return this.yEnd;			}		}		/// <summary>		/// Get time (variable) dimension size of file or socket data.		/// </summary>		public long Time		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.Z: No valid data to return in current state.");				return this.zDimension;			}		}		/// <summary>		/// Get time (fixed) dimension start value.		/// </summary>		public double TimeStart		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.ZStart: No valid data to return in current state.");				return this.zStart;			}		}		/// <summary>		/// Get time (fixed) dimension end value.		/// </summary>		public double TimeEnd		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.ZEnd: No valid data to return in current state.");				return this.zEnd;			}		}		/// <summary>		/// Get the sample rate of the file or socket data.		/// </summary>		public double SampleRate		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.SampleRate: No valid data to return in current state.");				return this.sampleRate;			}		}		/// <summary>		/// Get the minimum data value from the file or socket data.		/// </summary>		public double Min		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.Min: No valid data to return in current state.");				return this.minimumSample;			}		}		/// <summary>		/// Get the maximum data value from the file or socket data.		/// </summary>		public double Max		{			get			{				if (this.outputFileReader == null)					throw new System.Exception("MultiChannel3DReaderWriter.Max: No valid data to return in current state.");				return this.maximumSample;			}		}		#endregion	}}