Meta 
1.) File Locations
	a.) Need to be noted in the code //[File Location]
Use path settings, relative to the executable file.

2.) Runfile Premade model extensions

3.) Validate XML routine
Have validate xml routine.

4.) New standard XML files
---runfile, runfile error, module xml

Qs?
File locations?
X

EFI -- rewrote and it is ok (this works, need to do the switch to the XML Document)
1.) EFI class interaction with the dummy
	a.) getting back info
	b.) lighting up gui via off-on part in data
	
Qs?
Created the .dll -- fairly easy.
How do I create the "fake" xml files in the .dll?

Object
1.) rewrite items
a.) to meet new XML
b.) up/down color
c.) msg


GUI
3.) New Grapical User Interface Paradigm
--use graphical editor demo tool

////////////////////////////////////////////////////////////////////
1.) On RunfileEditor Side

a.) A RunfileObject class changes to handle Errors
        Each module, and IOP  ----\/ (created with an object factory first -- then Runfile created from objects)
        a.) --Severity {display what's there, -- (Warning, Error, OK)}
        b.) --Error Message from errorRunfile.

		   
		   Handling Directories!
		   //settings.save() <-- saves in the path the users was just in.
		   //building paths use path.combine() -- static function in
		   //settings to remember the last place the user saves
		   //MyDocuments --what the default places to save.
				//Earlab
						//
						
						
->		Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
->		Environment.GetFolderPath(Environment.SpecialFolder.Personal)
Environment.SpecialFolder.MyDocuments
Environment.SpecialFolder.Desktop
Environment.SpecialFolder.ApplicationData
Environment.SpecialFolder.History
Environment.SpecialFolder.ProgramFiles


//////////////////////////////////////////////////////////////////////////
Errorlog

GUI paradigm

--Error log
-------log of errors for the session
-------option to email the errors


--Main Window
            SPG 
                severity   -> change the color
                msg        -> display a message that the given data is not acceptable.

            GUI
                Displays Runfile Error Summary
                Like compile error
                total # of errors | total # of modules in error
                # of errors       | module error
                
               
                
           >Go back and do MVC!!! abstraction.
           
           >Editor only
				--Take command line only main [args]--to use the command line
				--launch existing desktop Earlab to handle the actual simulation
				--use to call the existing simulation engine.
				
				>launch from command line.
				
		   >Xml Layer
		   

--Launch Application
		  programmatically make button appear
				if runfile object has no errors
					make button appear
					
				On click of button
					--save runfile
						--check runfile
						--receive errors
							--if error blank
							----save runfile
								--launch application
								 
		   
--		  
		
                //2.) Send the Runfile XML string to the EFI and Receive XML Errors back
                //3.) if xml has errors
                //4.) RunfileObject.EFIUpdate(string VerificationErrors) to update spg
                //     Update Runfile Object
                //     Update display automatically
                //     Use older code to use the path to update necessary RunfileObjects
                //X.) else
                //6.) Allow desktop earlab to run.


                ///////to do this
                //a.) RunfileObject --
                //i.) str. severity, (already here) message on each parameter item.
                //ii.)

                //Do some operations on the Runfile Object ....

                //Clear the old errors

                //Discard any old verification information

     