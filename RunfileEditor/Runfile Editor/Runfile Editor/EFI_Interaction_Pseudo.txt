

//(a)static routine to take the whole xml return collection of event objects.
1.) Take event xml
2.) Store full xml into a collection of event nodes.


	foreach(xmlnode in xmlnodelist)
	{ 
	
		//
		get path
		split path
		//path is basically the information back from the EFI 
		get status
		get msg
		\\
				//start looking for the proper object to update
				foreach( emodule in Runfileobject.modules)
					{
						if (errorpath[index++] == module.name && errorpath[index++] != "null" )
							{
											 switch
												
													(Each I-O-P 
												
												
														switch
																here update object
																	// 1.) warning <- xml.warning;
																	// 2.) msg	   <- xml.msg.
														default
															ex
											 default
												ex

										
						else
						      {
							   //there is a problem with the module
										
										
										
							  }	
					
					}
					
					
////This is pseudo code 

//public static EFInteraction(     )
//{

////(a)static routine to take the whole xml return collection of event objects.
////1.) Take event xml
////2.) Store full xml into a collection of event nodes.

//    foreach(xmlnode xNode in xmlnodelist)
//        { 
//        //get path
//        //split path
//        //get status
//        //get msg

//                //start looking for the proper object to update
//                foreach(module RunfileModules in Runfileobject.modules)
//                    {
//                        if (path[index++] == module.name)
//                                {
//                                    if( path[index++] != "null")

//                                        {
//                                                switch

//                                                    (Each I-O-P 


//                                                        switch
//                                                                here update object
//                                                                    // 1.) warning <- xml.warning;
//                                                                    // 2.) msg	   <- xml.msg.
//                                                        default
//                                                            ex
//                                                default
//                                                    ex

//                                        }

//                                    else
//                                        {
//                                         //there is a problem with the module



//                                        }	


//                        }


//                }

//    }

////3.)getModuleXmls
////        Sends back the xmls for all modules in a collection of Module XML docs

////        signature like tryParse True = there, False = not there.

////a.) CheckModules
////b.) getModuleXmls
////    i.) getModuleXml


////public static bool getModuleXmls(string array ModuleNames, out  List<moduleXml> ModuleXmls)

////        a.) I have a special accessor so this is the format I want a List back.
////        b.) Pseudo code I have these two already in program



////private static bool getModuleXml(string ModuleName,out  XmlDocument ModuleXml)

////    if we get a false we have to end the program
////In the RunfileObject
////    bool moduleThere?





////3.) Chk Errors
////        EFI checks each module.

////public static bool checkRunfile(RunfileXml theRunfileXml, out  XmlDocument errorRunfile)

////1.) Are all modules there?
////2.) if ok check Runfile
////3.) check each module
////        public static bool checkModule( EarlabModuleObject theModule, moduleXml theModuleXml, out XmlNode ModuleErrorXml)
////4.)Check inputs

////5.) Check outputs

////6.) Check params

////New XML -- a schema is not really needed, since it cannot be edited.

////1.) RunfileErrorXml
////2.) ModuleErrorXml



////1.) RunfileErrorXml









////4.) Send EFI
////        checkRunfile
////        send.

////public static bool processRunfile(RunfileXml RunfileXml, out  XmlDocument errorEFI)


////A.) Module Error XML?
////B.) process errorEFI XML ?


